// Generated by CoffeeScript 1.7.1
(function() {
  var NoImplicitReturns,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = NoImplicitReturns = (function() {
    function NoImplicitReturns() {}

    NoImplicitReturns.prototype.rule = {
      name: 'no_implicit_returns',
      level: 'error',
      message: 'Explicit return required for multi-line function',
      description: 'Checks for explicit returns in multi-line functions'
    };

    NoImplicitReturns.prototype.type = function(node) {
      return node.constructor.name;
    };


    /**
     * Determines if a code block ends with a pure statement. If it does not,
     * register an error, as this code block will have an implicit return
     * generated.
     */

    NoImplicitReturns.prototype.visitCode = function(code, astApi) {
      var expressions, firstLine, isPureStatement, lastExpr, lastExprLine, lastLine, _base;
      if (__indexOf.call(this.constructors, code) >= 0) {
        return;
      }
      expressions = code.body.expressions;
      lastExpr = typeof (_base = code.body).lastNonComment === "function" ? _base.lastNonComment(expressions) : void 0;
      if ((lastExpr == null) || !lastExpr) {
        return;
      }
      isPureStatement = lastExpr.jumps() || this.type(lastExpr) === 'Throw';
      firstLine = code.locationData.first_line + 1;
      lastLine = code.locationData.last_line + 1;
      lastExprLine = lastExpr.locationData.first_line + 1;
      if (expressions.length > 1 && !isPureStatement) {
        this.errors.push(astApi.createError({
          context: code.variable,
          lineNumber: firstLine,
          lineNumberEnd: firstLine
        }));
      } else if (expressions.length === 1) {
        if (firstLine === lastLine && this.type(lastExpr) === 'Return') {
          this.errors.push(astApi.createError({
            context: code.variable,
            message: 'Explicit return not required for single-line function',
            lineNumber: firstLine,
            lineNumberEnd: firstLine
          }));
        }
        if (firstLine !== lastLine && !isPureStatement && firstLine !== lastExprLine) {
          this.errors.push(astApi.createError({
            message: 'Remove leading newline or add explicit return',
            context: code.variable,
            lineNumber: firstLine,
            lineNumberEnd: firstLine
          }));
        }
      }
    };


    /**
     * Performs a recursive search for the constructor of `classNode`, heavily
     * inspired by `Class.walkBody`. If a constructor is found, it is registered
     * in `this.constructors`.
     */

    NoImplicitReturns.prototype.visitClass = function(classNode) {
      classNode.traverseChildren(false, (function(_this) {
        return function(child) {
          var assign, value, _i, _j, _len, _len1, _ref, _ref1;
          if (_this.type(child) !== 'Block') {
            return;
          }
          _ref = child.expressions;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            value = _ref[_i];
            if (!(_this.type(value) === 'Value')) {
              continue;
            }
            if (!value.isObject(true)) {
              continue;
            }
            _ref1 = value.base.properties;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              assign = _ref1[_j];
              if (_this.type(assign) === 'Assign') {
                if (assign.variable.base.value === 'constructor') {
                  _this.constructors.push(assign.value);
                }
              }
            }
          }
        };
      })(this));
    };

    NoImplicitReturns.prototype.lintAST = function(root, astApi) {
      this.constructors = [];
      root.traverseChildren(true, (function(_this) {
        return function(child) {
          if (_this.type(child) === 'Class') {
            _this.visitClass(child);
          }
        };
      })(this));
      root.traverseChildren(true, (function(_this) {
        return function(child) {
          if (_this.type(child) === 'Code') {
            _this.visitCode(child, astApi);
          }
        };
      })(this));
    };

    return NoImplicitReturns;

  })();

}).call(this);
